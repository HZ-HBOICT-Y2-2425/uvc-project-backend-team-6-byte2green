services:
  educational:
    build: ./educational
    volumes:
      - ./educational/code:/usr/src/app
      - educational-node-modules:/usr/src/app/node_modules 
    networks:
      - myeducational
    ports:
      - "${EDUCATIONAL_PORT}:${EDUCATIONAL_PORT}"
    working_dir: /usr/src/app
    command: /bin/bash -c "npm install && npm run dev" 
    environment:
      - EDUCATIONAL_DB_HOST=${EDUCATIONAL_DB_HOST}:${EDUCATIONAL_MYSQL_PORT}
      - EDUCATIONAL_DB_NAME=${EDUCATIONAL_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql-server-educational:
        condition: service_healthy

  api-gateway:
    build: ./api-gateway
    volumes:
      - ./api-gateway/code:/usr/src/app
    networks:
      - myeducational
      - mychallenges
      - myusers
    ports:
      - "3010:3010"
    working_dir: /usr/src/app
    command: npm run dev
    environment:
      - PORT=3010

  mysql-server-educational:
    image: mysql:8.0
    networks:
      - myeducational
    environment:
      - MYSQL_DATABASE=${EDUCATIONAL_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${EDUCATIONAL_MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./educational/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql-data-educational:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 20s

  challenges:
    build: ./challenges
    volumes:
      - ./challenges/code:/usr/src/app
      - challenges-node-modules:/usr/src/app/node_modules 
    networks:
      - mychallenges
    ports:
      - "${CHALLENGES_PORT}:${CHALLENGES_PORT}"
    working_dir: /usr/src/app
    command: /bin/bash -c "npm install && npm run dev"  
    environment:
      - CHALLENGES_DB_HOST=${CHALLENGES_DB_HOST}:${CHALLENGES_MYSQL_PORT}
      - CHALLENGES_DB_NAME=${CHALLENGES_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql-server-challenges:
        condition: service_healthy

  mysql-server-challenges:
    image: mysql:8.0
    networks:
      - mychallenges
    environment:
      - MYSQL_DATABASE=${CHALLENGES_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${CHALLENGES_MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./challenges/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql-data-challenges:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 20s

  users:
    build: ./users
    volumes:
      - ./users/code:/usr/src/app
      - users-node-modules:/usr/src/app/node_modules 
    networks:
      - myusers
    ports:
      - "${USERS_PORT}:${USERS_PORT}"
    working_dir: /usr/src/app
    command: /bin/bash -c "npm install && npm run dev"  
    environment:
      - USERS_DB_HOST=${USERS_DB_HOST}:${USERS_MYSQL_PORT}
      - USERS_DB_NAME=${USERS_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql-server-users:
        condition: service_healthy

  mysql-server-users:
    image: mysql:8.0
    networks:
      - myusers
    environment:
      - MYSQL_DATABASE=${USERS_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${USERS_MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./users/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql-data-users:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 20s

  gallery:
    build: ./gallery
    volumes:
      - ./gallery/code:/usr/src/app
      - gallery-node-modules:/usr/src/app/node_modules 
    networks:
      - mygallery
    ports:
      - "${GALLERY_PORT}:${GALLERY_PORT}"
    working_dir: /usr/src/app
    command: /bin/bash -c "npm install && npm run dev"  
    environment:
      - GALLERY_DB_HOST=${GALLERY_DB_HOST}:${GALLERY_MYSQL_PORT}
      - GALLERY_DB_NAME=${GALLERY_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql-server-gallery:
        condition: service_healthy

  mysql-server-gallery:
    image: mysql:8.0
    networks:
      - mygallery
    environment:
      - MYSQL_DATABASE=${GALLERY_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${GALLERY_MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./gallery/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql-data-gallery:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 20s

  phpmyadmin:
    image: phpmyadmin:latest
    networks:
      - myeducational
      - mychallenges
      - myusers
      - mygallery
    environment:
      - PMA_HOSTS=mysql-server-educational,mysql-server-challenges,mysql-server-users,mysql-server-gallery
      - PMA_USER=${MYSQL_USER}
      - PMA_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "8080:80"

networks:
  myeducational:
    driver: bridge
  mychallenges:
    driver: bridge
  myusers:
    driver: bridge
  mygallery:
    driver: bridge

volumes:
  mysql-data-educational:
  mysql-data-challenges:
  mysql-data-users:
  mysql-data-gallery:
  educational-node-modules: 
  challenges-node-modules:  
  users-node-modules: 
  gallery-node-modules: 
